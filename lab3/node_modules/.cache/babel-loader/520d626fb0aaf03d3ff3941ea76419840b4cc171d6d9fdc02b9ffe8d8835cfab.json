{"ast":null,"code":"var _jsxFileName = \"/Users/zachfischer/CS35L/CS35L-Software-Construction/lab3/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  //creates an array, where the first element is an array of nil\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  });\n  if (moves) {}\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        currentMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c2 = Game;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  currentMove\n}) {\n  _s2();\n  const [selectMode, setSelectMode] = useState(true);\n  const [selectPiece, setSelectPiece] = useState(0);\n  function handleClick(i) {\n    console.log(i);\n\n    //State 0 - THERE IS A WINNER, GAME IS OVER \n    if (calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n\n    //STATE 1 - FIRST 3 MOVES, PLACING\n    if (currentMove < 6) {\n      if (squares[i]) {\n        return; //First three turns – ONLY PLACING DOWN\n      }\n      if (xIsNext) {\n        nextSquares[i] = \"X\";\n      } else {\n        nextSquares[i] = \"O\";\n      }\n      onPlay(nextSquares);\n    }\n    //STATE 2 - EVERY OTHER MOVE\n    else {\n      //STATE 2.1 - SELECTING a piece to move\n      if (selectMode) {\n        if (squares[i] === \"X\" && xIsNext || squares[i] === 'O' && !xIsNext) {\n          setSelectPiece(i);\n          setSelectMode(false); //Now it's time to move that piece baby\n        } else {\n          //selected the wrong piece, get outta here\n          return;\n        }\n      }\n\n      //STATE 2.2 - MOVING that piece\n      else {\n        setSelectMode(true);\n\n        //Requested square is already occupied\n        if (squares[i]) {\n          return;\n        }\n\n        //Check the requested spot is available\n        if (isValid(selectPiece, i)) {\n          //Check if center piece is occupied by your piece\n          if (squares[4] === \"X\" && xIsNext || squares[4] === 'O' && !xIsNext) {\n            console.log(\"MUST MOVE\");\n            //Check if the position would win\n            let tempSquares = nextSquares;\n            if (xIsNext) {\n              tempSquares[i] = \"X\";\n            } else {\n              tempSquares[i] = \"O\";\n            }\n            // console.log(\"Select piece: \", selectPiece);\n            // console.log(\"Select piece === 4: \", selectPiece === 4);\n            // console.log(\"calculate winner: \", calculateWinner(tempSquares));\n            // console.log(\"Required piece: \", i);\n\n            if (selectPiece === 4 || calculateWinner(tempSquares) != null) {\n              // console.log(\"TURE??\")\n              if (xIsNext) {\n                nextSquares[i] = \"X\";\n              } else {\n                nextSquares[i] = \"O\";\n              }\n              nextSquares[selectPiece] = null;\n            } else {\n              console.log(\"Center piece is occupied. Must win or vacate center\");\n              return;\n            }\n          } else {\n            //If you don't have a piece in the center, you can do whateva\n            if (xIsNext) {\n              nextSquares[i] = \"X\";\n            } else {\n              nextSquares[i] = \"O\";\n            }\n            nextSquares[selectPiece] = null;\n          }\n        } else {\n          return;\n        }\n        onPlay(nextSquares);\n      }\n    }\n  }\n\n  //Check if someone has won\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  //Return the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s2(Board, \"tMMO85SmoY0sdUx/a1cL2DksKlc=\");\n_c3 = Board;\nfunction isValid(currPos, r) {\n  let validPos = false;\n  //r is short for requestedPosition\n  //there could be some logic here but i'm just brute forcing it, there are only 9 spots\n  switch (currPos) {\n    case 0:\n      validPos = r === 1 || r === 3 || r === 4;\n      break;\n    case 1:\n      validPos = r === 0 || r === 2 || r === 3 || r === 4 || r === 5;\n      break;\n    case 2:\n      validPos = r === 1 || r === 4 || r === 5;\n      break;\n    case 3:\n      validPos = r === 0 || r === 1 || r === 4 || r === 6 || r === 7;\n      break;\n    case 4:\n      validPos = true;\n      break;\n    case 5:\n      validPos = r === 1 || r === 2 || r === 4 || r === 7 || r === 8;\n      break;\n    case 6:\n      validPos = r === 3 || r === 4 || r === 7;\n      break;\n    case 7:\n      validPos = r === 3 || r === 5 || r === 4 || r === 6 || r === 8;\n      break;\n    case 8:\n      validPos = r === 7 || r === 4 || r === 5;\n      break;\n    default:\n      validPos = false;\n  }\n  return validPos;\n}\n\n//Keep this function\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Game\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","xIsNext","handlePlay","nextSquares","nextHistory","slice","length","jumpTo","nextMove","moves","map","squares","move","description","Board","onPlay","_c2","_s2","selectMode","setSelectMode","selectPiece","setSelectPiece","handleClick","i","console","log","calculateWinner","isValid","tempSquares","winner","status","_c3","currPos","r","validPos","lines","a","b","c","$RefreshReg$"],"sources":["/Users/zachfischer/CS35L/CS35L-Software-Construction/lab3/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  //creates an array, where the first element is an array of nil\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);  \n  }\n\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n  if(moves){};\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} currentMove={currentMove} />\n      </div>\n      {/* <div>\n        <ol> {moves} </ol>\n      </div> */}\n    </div>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay, currentMove }) {\n  const [selectMode, setSelectMode] = useState(true);\n  const [selectPiece, setSelectPiece] = useState(0);\n\n  function handleClick(i) {\n    console.log(i);\n\n    //State 0 - THERE IS A WINNER, GAME IS OVER \n    if (calculateWinner(squares)) {return;}\n    const nextSquares = squares.slice();\n\n    //STATE 1 - FIRST 3 MOVES, PLACING\n    if(currentMove < 6){\n      if(squares[i]) {\n        return; //First three turns – ONLY PLACING DOWN\n      }\n\n      if (xIsNext) {\n        nextSquares[i] = \"X\";\n      } else {\n        nextSquares[i] = \"O\";\n      }\n      onPlay(nextSquares);\n    } \n    //STATE 2 - EVERY OTHER MOVE\n    else {\n      //STATE 2.1 - SELECTING a piece to move\n      if(selectMode){\n        if((((squares[i] === \"X\") && (xIsNext))) || ((squares[i] === 'O') && (!xIsNext))) {\n          setSelectPiece(i);\n          setSelectMode(false); //Now it's time to move that piece baby\n        } else {\n          //selected the wrong piece, get outta here\n          return;\n        }\n      }\n\n      //STATE 2.2 - MOVING that piece\n      else {\n        setSelectMode(true);\n\n        //Requested square is already occupied\n        if(squares[i]){return;}\n\n        //Check the requested spot is available\n        if(isValid(selectPiece, i)){\n          \n          //Check if center piece is occupied by your piece\n          if((((squares[4] === \"X\") && (xIsNext))) || ((squares[4] === 'O') && (!xIsNext))){\n\n            console.log(\"MUST MOVE\")\n            //Check if the position would win\n            let tempSquares = nextSquares;\n            if (xIsNext) {\n              tempSquares[i] = \"X\";\n            } else {\n              tempSquares[i] = \"O\";\n            }\n            // console.log(\"Select piece: \", selectPiece);\n            // console.log(\"Select piece === 4: \", selectPiece === 4);\n            // console.log(\"calculate winner: \", calculateWinner(tempSquares));\n            // console.log(\"Required piece: \", i);\n\n            if(selectPiece === 4 || calculateWinner(tempSquares) != null) {\n              // console.log(\"TURE??\")\n              if (xIsNext) {\n                nextSquares[i] = \"X\";\n              } else {\n                nextSquares[i] = \"O\";\n              }\n              nextSquares[selectPiece] = null;\n            } else {\n              console.log(\"Center piece is occupied. Must win or vacate center\");\n              return;\n            }\n          } else {\n            //If you don't have a piece in the center, you can do whateva\n            if (xIsNext) {\n              nextSquares[i] = \"X\";\n            } else {\n              nextSquares[i] = \"O\";\n            }\n            nextSquares[selectPiece] = null;\n          }\n          \n        } else {\n          return;\n        }\n       \n        onPlay(nextSquares);\n      }\n    }\n\n\n\n  }\n\n  //Check if someone has won\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  \n  \n  //Return the board\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\n\n\nfunction isValid(currPos, r) {\n  let validPos = false;\n  //r is short for requestedPosition\n  //there could be some logic here but i'm just brute forcing it, there are only 9 spots\n  switch (currPos){\n    case 0:\n      validPos = (r === 1 || r === 3 || r === 4);\n      break;\n    case 1:\n      validPos = (r === 0 || r === 2 || r === 3 || r === 4 || r === 5);\n      break;\n    case 2:\n      validPos = (r === 1 || r === 4 || r === 5);\n      break;\n    case 3:\n      validPos = (r === 0 || r === 1 || r === 4 || r === 6 || r === 7);\n      break;\n    case 4:\n      validPos = true;\n      break;\n    case 5:\n      validPos = (r === 1 || r === 2 || r === 4 || r === 7 || r === 8);\n      break;\n    case 6:\n      validPos = (r === 3 || r === 4 || r === 7);\n      break;\n    case 7:\n      validPos = (r === 3 || r === 5 || r === 4 || r === 6 || r === 8);\n      break;\n    case 8:\n      validPos = (r === 7 || r === 4 || r === 5);\n      break;\n    default:\n      validPos = false;\n  }\n  return validPos;\n}\n\n\n//Keep this function\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}